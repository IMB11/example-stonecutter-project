plugins {
    id("dev.architectury.loom") version "1.4-SNAPSHOT"
    id 'maven-publish'
}

version =  property("mod.version") + "+" + stonecutter.current.version
group = "com.example"

base {
    archivesName = property("mod.name")
}

repositories {
    mavenCentral()
    mavenLocal()
    maven {
        url "https://jitpack.io"
    }
    maven {
        url "https://maven.terraformersmc.com/releases/"
    }
    maven {
        url "https://maven.isxander.dev/releases"
    }
    maven {
        url "https://maven.shedaniel.me/"
    }
    maven {
        url "https://maven.quiltmc.org/repository/release/"
    }
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots"
    }
    maven {
        url "https://maven.kikugie.dev/releases"
    }
    maven {
        url "https://maven.neoforged.net/releases/"
    }
}

var loader = loom.platform.get().name.lowercase()

dependencies {
    minecraft("com.mojang:minecraft:${stonecutter.current.version}")
    mappings(loom.officialMojangMappings())
    if (loader == "fabric") {
        modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
        modImplementation "net.fabricmc:fabric-loader:${property("deps.fabric_loader")}"
        modImplementation "com.terraformersmc:modmenu:${property("deps.modmenu")}"
    } else {
        "neoForge"("net.neoforged:neoforge:${property("deps.fml")}")
    }

    minecraft "com.mojang:minecraft:${stonecutter.current.version}"
    mappings "net.fabricmc:yarn:${property('deps.yarn')}:v2"

    modImplementation "net.fabricmc:fabric-loader:${property('deps.fabric_loader')}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${property('deps.fabric_api')}"
}

if (stonecutter.current.active) { // run configs for non-active version would be invalid
    loom {
        runConfigs.all {
            ideConfigGenerated = true // generate IDE tasks for running client, server and testmod, datagen if those are present
            runDir "../../run" // use a global run directory for all versions
        }
    }
}

def isForge = loom.isForgeLike
stonecutter.expression(it -> {
    // expressions have to return boolean result if it matches, and null otherwise
    if (it == "fabric") return !isForge
    if (it == "neoforge") return isForge
    return null
})

//loom {
//    accessWidenerPath = file("../../src/main/resources/<MOD_ID>.accesswidener")
//}

processResources {
    filesMatching("fabric.mod.json") {
        expand 'mod_version': project.version,
                'target_minecraft': project.property('mod.target')
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 17
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()

    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.base.archivesName.get()}"}
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}